#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
"""

import os
import tempfile
from code2markdown.domain.files import ProjectTreeBuilder
from code2markdown.domain.filters import FileSize, FilterSettings

def test_filter_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        with open(os.path.join(temp_dir, "main.py"), "w") as f:
            f.write("# Main Python file\nprint('Hello')")
            
        with open(os.path.join(temp_dir, "README.md"), "w") as f:
            f.write("# Project Documentation\nThis is a test.")
            
        with open(os.path.join(temp_dir, "test.pyc"), "wb") as f:
            f.write(b"\x00\x01\x02\x03")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = FilterSettings(
            include_patterns=[".py", ".md"],
            exclude_patterns=["__pycache__", ".git"],
            max_file_size=FileSize(kb=100),
            show_excluded=False,
        )
        
        print(f"üì• Include patterns: {filters.include_patterns}")
        print(f"üì§ Exclude patterns: {filters.exclude_patterns}")
        print(f"üìä Max file size: {filters.max_file_size.kb} KB")
        print()
        
        # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞
        builder = ProjectTreeBuilder()
        root_node = builder.build_tree(temp_dir, filters)
        
        if root_node is not None:
            print("üå≥ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
            def print_tree(node, depth=0):
                indent = "  " * depth
                if hasattr(node, 'children'):
                    print(f"{indent}üìÅ {node.name}/")
                    for child in node.children:
                        print_tree(child, depth + 1)
                else:
                    print(f"{indent}üìÑ {node.name} ({node.size} bytes)")
            
            print_tree(root_node)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞")

if __name__ == "__main__":
    test_filter_processing()