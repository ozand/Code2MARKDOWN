#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã GenerationService
"""

import os
import tempfile
from unittest.mock import Mock

from code2markdown.application.services import GenerationService
from code2markdown.application.repository import IHistoryRepository
from code2markdown.domain.filters import FileSize, FilterSettings

def test_generation_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É GenerationService"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã GenerationService")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        with open(os.path.join(temp_dir, "main.py"), "w") as f:
            f.write("# Main Python file\nprint('Hello')")
            
        with open(os.path.join(temp_dir, "README.md"), "w") as f:
            f.write("# Project Documentation\nThis is a test.")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = FilterSettings(
            include_patterns=[".py", ".md"],
            exclude_patterns=["__pycache__", ".git"],
            max_file_size=FileSize(kb=100),
            show_excluded=False,
        )
        
        print(f"üì• Include patterns: {filters.include_patterns}")
        print(f"üì§ Exclude patterns: {filters.exclude_patterns}")
        print(f"üìä Max file size: {filters.max_file_size.kb} KB")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        mock_repo = Mock(spec=IHistoryRepository)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = GenerationService(history_repo=mock_repo)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω
        template_content = "# Project: {{ absolute_code_path }}\n\n{{ source_tree }}\n\n{{#each files}}\n{{path}}:\n```\n{{code}}\n```\n{{/each}}"
        
        # –ú–æ–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —à–∞–±–ª–æ–Ω–∞
        from unittest.mock import patch
        with patch.object(service, '_load_template') as mock_load_template:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
            mock_template = Mock()
            mock_template.return_value = "# Generated Documentation\nContent here"
            mock_load_template.return_value = mock_template
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            try:
                result = service.generate_and_save_documentation(
                    project_path=temp_dir,
                    template_name="test_template.hbs",
                    filters=filters,
                )
                
                print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—ã–ª –≤—ã–∑–≤–∞–Ω
                if mock_repo.save.called:
                    print("üíæ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    saved_request = mock_repo.save.call_args[0][0]
                    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {saved_request.file_count}")
                    print(f"üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {saved_request.project_path}")
                else:
                    print("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                import traceback
                traceback.print_exc()

if __name__ == "__main__":
    test_generation_service()