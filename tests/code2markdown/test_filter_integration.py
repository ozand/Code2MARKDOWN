#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Filter Settings —Å File Selection
"""

import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app.py
from code2markdown.app import (
    get_all_child_paths,
    get_file_tree_structure,
)


def test_filter_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""

    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Filter Settings —Å File Selection")
    print("=" * 60)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º test_project –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_project_path = "test_project"

    if not os.path.exists(test_project_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ {test_project_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    include_patterns = [".py", ".md", ".txt"]
    exclude_patterns = ["__pycache__", "*.pyc", "cache"]
    max_file_size = 100  # KB

    print(f"üìÅ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {test_project_path}")
    print(f"üì• Include patterns: {include_patterns}")
    print(f"üì§ Exclude patterns: {exclude_patterns}")
    print(f"üìä Max file size: {max_file_size} KB")
    print()

    # –¢–µ—Å—Ç 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (show_excluded=False)
    print("üß™ –¢–µ—Å—Ç 1: –ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("-" * 40)

    tree_included = get_file_tree_structure(
        test_project_path,
        max_depth=3,
        include_patterns=include_patterns,
        exclude_patterns=exclude_patterns,
        max_file_size=max_file_size,
        show_excluded=False,
    )

    included_count = count_files_in_tree(tree_included)
    print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {included_count}")

    # –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–∫–∞–∑–æ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (show_excluded=True)
    print("\nüß™ –¢–µ—Å—Ç 2: –ü–æ–∫–∞–∑ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("-" * 40)

    tree_all = get_file_tree_structure(
        test_project_path,
        max_depth=3,
        include_patterns=include_patterns,
        exclude_patterns=exclude_patterns,
        max_file_size=max_file_size,
        show_excluded=True,
    )

    all_count = count_files_in_tree(tree_all)
    excluded_count = count_excluded_files_in_tree(tree_all)

    print(f"‚úÖ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {all_count}")
    print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {excluded_count}")
    print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {all_count - excluded_count}")

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ get_all_child_paths —Å exclude_excluded
    print("\nüß™ –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏—è get_all_child_paths")
    print("-" * 40)

    if tree_all:
        first_folder = None
        for name, info in tree_all.items():
            if info["type"] == "folder":
                first_folder = info
                break

        if first_folder:
            paths_all = get_all_child_paths(first_folder, include_excluded=True)
            paths_included = get_all_child_paths(first_folder, include_excluded=False)

            print(f"‚úÖ –í—Å–µ—Ö –ø—É—Ç–µ–π –≤ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–µ: {len(paths_all)}")
            print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π: {len(paths_included)}")
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π: {len(paths_all) - len(paths_included)}")

    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    print("\nüß™ –¢–µ—Å—Ç 4: –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    print("-" * 40)

    exclusion_stats = analyze_exclusions(tree_all)
    for reason, count in exclusion_stats.items():
        print(f"üìä {reason}: {count} —Ñ–∞–π–ª–æ–≤")

    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


def count_files_in_tree(tree):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ"""
    count = 0
    for name, info in tree.items():
        if info["type"] == "file":
            count += 1
        elif info["type"] == "folder" and info.get("children"):
            count += count_files_in_tree(info["children"])
    return count


def count_excluded_files_in_tree(tree):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ"""
    count = 0
    for name, info in tree.items():
        if info["type"] == "file" and info.get("excluded", False):
            count += 1
        elif info["type"] == "folder" and info.get("children"):
            count += count_excluded_files_in_tree(info["children"])
    return count


def analyze_exclusions(tree):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    stats = {"–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã": 0, "–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã": 0, "–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏": 0}

    def analyze_recursive(structure):
        for name, info in structure.items():
            if info["type"] == "file":
                if info.get("excluded", False):
                    stats["–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"] += 1
                else:
                    stats["–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"] += 1
            elif info["type"] == "folder":
                if info.get("excluded", False):
                    stats["–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏"] += 1
                if info.get("children"):
                    analyze_recursive(info["children"])

    analyze_recursive(tree)
    return stats


if __name__ == "__main__":
    test_filter_integration()
